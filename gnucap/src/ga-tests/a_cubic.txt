Gnucap gnucap-arails  2009.12.07 RCS 26.136 master 2010-09-25  bmm_semi_hsp, bm_model fix, back to bmm_semi
The Gnu Circuit Analysis Package
Never trust any version less than 1.0
Copyright 1982-2009, Albert Davis
Gnucap comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome
to redistribute it under the terms of 
the GNU General Public License, version 3 or later.
See the file "COPYING" for details.
circuit 2 - cubic 
#           v(1)       i(I1)     
==== SIM::solve/ linserach_solve 
==== loop beginning,  iter=0
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0
    =# work with ARD_LIST::card_list.tr_load() 
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 0.003
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
element::tr_load_source I1 d=-0.001
 NOTE - load is conditional, only change was loaded 
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=0.001
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=0.001
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 0.003 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0
 F =J*Xc: 
     F[0]=0
     F[1]=0
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-0.001
*** FN= 

     x[0]=0
     x[1]=-0.001
 *** fnor=5e-07
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-0.001 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-3e-06 s ij=0.003 fj=-0.001 sfj=1
*** GR= 

     x[0]=0
     x[1]=-3e-06
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=0.001
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.333333
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.333333
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0
 Xn = 

     x[0]=0
     x[1]=0.333333
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.333333
      EPSDU= 0.100000E-05 RELLEN=0.333333E+00 MINLBD=0.300000E-05
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.333333
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0
    =# work with ARD_LIST::card_list.tr_load() 
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 0.00133333
element::tr_load_source A1.Yj d=0.000259259
 NOTE - load is conditional, only change was loaded 
element::tr_load_source I1 d=-0.001
 NOTE - load is conditional, only change was loaded 
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 0.00133333 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.333333
 F =J*Xc: 
     F[0]=0
     F[1]=0.000444444
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-0.000296296
    ---------- results f[] 
 f[0]=0
 f[1]=-0.000296296
--
 +++++++++++++++ calc_circuit returning- fnor=4.38957e-08
      FNOR1=0.438957E-07 FNOR=0.500000E-06 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.100000E-05 MINLBD=0.300000E-05
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.333333
  RESIDUAL=0.296296E-03, STEP=0.333333E+00,  RESIDUAL DECR.  =0.300000E-05
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=1
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.333333
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 0.00133333 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.333333
 F =J*Xc: 
     F[0]=0
     F[1]=0.000444444
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-0.000296296
*** FN= 

     x[0]=0
     x[1]=-0.000296296
 *** fnor=4.38957e-08
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-0.000296296 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-3.95062e-07 s ij=0.00133333 fj=-0.000296296 sfj=1
*** GR= 

     x[0]=0
     x[1]=-3.95062e-07
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.555556
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.555556
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.333333
 Xn = 

     x[0]=0
     x[1]=0.555556
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.222222
      EPSDU= 0.100000E-05 RELLEN=0.222222E+00 MINLBD=0.450000E-05
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.555556
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000740741
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -0.000740741
element::tr_load_source A1.Yj d=0.000323731
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 0.000592593 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.555556
 F =J*Xc: 
     F[0]=0
     F[1]=0.000329218
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-8.77915e-05
    ---------- results f[] 
 f[0]=0
 f[1]=-8.77915e-05
--
 +++++++++++++++ calc_circuit returning- fnor=3.85367e-09
      FNOR1=0.385367E-08 FNOR=0.438957E-07 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.877915E-07 MINLBD=0.450000E-05
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.555556
  RESIDUAL=0.877915E-04, STEP=0.222222E+00,  RESIDUAL DECR.  =0.395062E-06
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=2
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.555556
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 0.000592593 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.555556
 F =J*Xc: 
     F[0]=0
     F[1]=0.000329218
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-8.77915e-05
*** FN= 

     x[0]=0
     x[1]=-8.77915e-05
 *** fnor=3.85367e-09
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-8.77915e-05 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-5.20246e-08 s ij=0.000592593 fj=-8.77915e-05 sfj=1
*** GR= 

     x[0]=0
     x[1]=-5.20246e-08
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.703704
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.703704
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.555556
 Xn = 

     x[0]=0
     x[1]=0.703704
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.148148
      EPSDU= 0.100000E-05 RELLEN=0.148148E+00 MINLBD=0.675000E-05
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.703704
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00041701
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -0.000329218
element::tr_load_source A1.Yj d=0.00020566
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 0.000263374 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.703704
 F =J*Xc: 
     F[0]=0
     F[1]=0.000185338
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-2.60123e-05
    ---------- results f[] 
 f[0]=0
 f[1]=-2.60123e-05
--
 +++++++++++++++ calc_circuit returning- fnor=3.3832e-10
      FNOR1=0.338320E-09 FNOR=0.385367E-08 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.770735E-08 MINLBD=0.675000E-05
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.703704
  RESIDUAL=0.260123E-04, STEP=0.148148E+00,  RESIDUAL DECR.  =0.520246E-07
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=3
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.703704
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 0.000263374 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.703704
 F =J*Xc: 
     F[0]=0
     F[1]=0.000185338
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-2.60123e-05
*** FN= 

     x[0]=0
     x[1]=-2.60123e-05
 *** fnor=3.3832e-10
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-2.60123e-05 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-6.85097e-09 s ij=0.000263374 fj=-2.60123e-05 sfj=1
*** GR= 

     x[0]=0
     x[1]=-6.85097e-09
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.802469
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.802469
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.703704
 Xn = 

     x[0]=0
     x[1]=0.802469
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.0987654
      EPSDU= 0.100000E-05 RELLEN=0.987654E-01 MINLBD=0.101250E-04
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.802469
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.00021135
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -0.000146319
element::tr_load_source A1.Yj d=0.000109709
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 0.000117055 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.802469
 F =J*Xc: 
     F[0]=0
     F[1]=9.39333e-05
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-7.70735e-06
    ---------- results f[] 
 f[0]=0
 f[1]=-7.70735e-06
--
 +++++++++++++++ calc_circuit returning- fnor=2.97016e-11
      FNOR1=0.297016E-10 FNOR=0.338320E-09 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.676639E-09 MINLBD=0.101250E-04
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.802469
  RESIDUAL=0.770735E-05, STEP=0.987654E-01,  RESIDUAL DECR.  =0.685097E-08
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=4
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.802469
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 0.000117055 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.802469
 F =J*Xc: 
     F[0]=0
     F[1]=9.39333e-05
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-7.70735e-06
*** FN= 

     x[0]=0
     x[1]=-7.70735e-06
 *** fnor=2.97016e-11
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-7.70735e-06 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-9.02186e-10 s ij=0.000117055 fj=-7.70735e-06 sfj=1
*** GR= 

     x[0]=0
     x[1]=-9.02186e-10
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.868313
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.868313
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.802469
 Xn = 

     x[0]=0
     x[1]=0.868313
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.0658436
      EPSDU= 0.100000E-05 RELLEN=0.658436E-01 MINLBD=0.151875E-04
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.868313
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=0.000101641
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -6.50307e-05
element::tr_load_source A1.Yj d=5.41834e-05
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 5.20246e-05 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.868313
 F =J*Xc: 
     F[0]=0
     F[1]=4.51736e-05
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-2.28366e-06
    ---------- results f[] 
 f[0]=0
 f[1]=-2.28366e-06
--
 +++++++++++++++ calc_circuit returning- fnor=2.60755e-12
      FNOR1=0.260755E-11 FNOR=0.297016E-10 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.594032E-10 MINLBD=0.151875E-04
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.868313
  RESIDUAL=0.228366E-05, STEP=0.658436E-01,  RESIDUAL DECR.  =0.902186E-09
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=5
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.868313
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 5.20246e-05 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.868313
 F =J*Xc: 
     F[0]=0
     F[1]=4.51736e-05
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-2.28366e-06
*** FN= 

     x[0]=0
     x[1]=-2.28366e-06
 *** fnor=2.60755e-12
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-2.28366e-06 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-1.18806e-10 s ij=5.20246e-05 fj=-2.28366e-06 sfj=1
*** GR= 

     x[0]=0
     x[1]=-1.18806e-10
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.912208
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.912208
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.868313
 Xn = 

     x[0]=0
     x[1]=0.912208
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.0438957
      EPSDU= 0.100000E-05 RELLEN=0.438957E-01 MINLBD=0.227813E-04
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.912208
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=4.74573e-05
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -2.89025e-05
element::tr_load_source A1.Yj d=2.56885e-05
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=2.17688e-05
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=2.17688e-05
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=2.17688e-05
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 2.31221e-05 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.912208
 F =J*Xc: 
     F[0]=0
     F[1]=2.10921e-05
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-6.76639e-07
    ---------- results f[] 
 f[0]=0
 f[1]=-6.76639e-07
--
 +++++++++++++++ calc_circuit returning- fnor=2.2892e-13
      FNOR1=0.228920E-12 FNOR=0.260755E-11 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.521509E-11 MINLBD=0.227813E-04
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.912208
  RESIDUAL=0.676639E-06, STEP=0.438957E-01,  RESIDUAL DECR.  =0.118806E-09
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=6
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=2.17688e-05
    =# work with ARD_LIST::card_list.tr_load() 
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 2.31221e-05
element::tr_load_source A1.Yj d=0.000978231
 NOTE - load is conditional, only change was loaded 
element::tr_load_source I1 d=-0.001
 NOTE - load is conditional, only change was loaded 
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=4.35375e-05
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=4.35375e-05
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.912208
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 4.62441e-05 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.912208
 F =J*Xc: 
     F[0]=0
     F[1]=4.21843e-05
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-1.35328e-06
*** FN= 

     x[0]=0
     x[1]=-1.35328e-06
 *** fnor=9.15682e-13
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-1.35328e-06 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-6.25812e-11 s ij=4.62441e-05 fj=-1.35328e-06 sfj=1
*** GR= 

     x[0]=0
     x[1]=-6.25812e-11
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=4.35375e-05
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.941472
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.941472
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.912208
 Xn = 

     x[0]=0
     x[1]=0.941472
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.0292638
      EPSDU= 0.100000E-05 RELLEN=0.292638E-01 MINLBD=0.341719E-04
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.941472
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=0
    =# work with ARD_LIST::card_list.tr_load() 
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 1.02765e-05
element::tr_load_source A1.Yj d=0.000990124
 NOTE - load is conditional, only change was loaded 
element::tr_load_source I1 d=-0.001
 NOTE - load is conditional, only change was loaded 
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 1.02765e-05 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.941472
 F =J*Xc: 
     F[0]=0
     F[1]=9.67502e-06
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-2.00485e-07
    ---------- results f[] 
 f[0]=0
 f[1]=-2.00485e-07
--
 +++++++++++++++ calc_circuit returning- fnor=2.00972e-14
      FNOR1=0.200972E-13 FNOR=0.915682E-12 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.183136E-11 MINLBD=0.341719E-04
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.941472
  RESIDUAL=0.200485E-06, STEP=0.292638E-01,  RESIDUAL DECR.  =0.625812E-10
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=7
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.941472
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 1.02765e-05 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.941472
 F =J*Xc: 
     F[0]=0
     F[1]=9.67502e-06
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-2.00485e-07
*** FN= 

     x[0]=0
     x[1]=-2.00485e-07
 *** fnor=2.00972e-14
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-2.00485e-07 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-2.06028e-12 s ij=1.02765e-05 fj=-2.00485e-07 sfj=1
*** GR= 

     x[0]=0
     x[1]=-2.06028e-12
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.960981
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.960981
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.941472
 Xn = 

     x[0]=0
     x[1]=0.960981
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.0195091
      EPSDU= 0.100000E-05 RELLEN=0.195091E-01 MINLBD=0.512580E-04
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.960981
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=9.8755e-06
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -5.70913e-06
element::tr_load_source A1.Yj d=5.42697e-06
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 4.56735e-06 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.960981
 F =J*Xc: 
     F[0]=0
     F[1]=4.38913e-06
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-5.94028e-08
    ---------- results f[] 
 f[0]=0
 f[1]=-5.94028e-08
--
 +++++++++++++++ calc_circuit returning- fnor=1.76434e-15
      FNOR1=0.176434E-14 FNOR=0.200972E-13 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.401943E-13 MINLBD=0.512580E-04
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.960981
  RESIDUAL=0.594028E-07, STEP=0.195091E-01,  RESIDUAL DECR.  =0.206028E-11
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=8
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.960981
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 4.56735e-06 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.960981
 F =J*Xc: 
     F[0]=0
     F[1]=4.38913e-06
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-5.94028e-08
*** FN= 

     x[0]=0
     x[1]=-5.94028e-08
 *** fnor=1.76434e-15
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-5.94028e-08 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-2.71313e-13 s ij=4.56735e-06 fj=-5.94028e-08 sfj=1
*** GR= 

     x[0]=0
     x[1]=-2.71313e-13
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.973987
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.973987
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.960981
 Xn = 

     x[0]=0
     x[1]=0.973987
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.013006
      EPSDU= 0.100000E-05 RELLEN=0.130060E-01 MINLBD=0.768877E-04
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.973987
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=4.44854e-06
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -2.53738e-06
element::tr_load_source A1.Yj d=2.45378e-06
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 2.02997e-06 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.973987
 F =J*Xc: 
     F[0]=0
     F[1]=1.97716e-06
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-1.76006e-08
    ---------- results f[] 
 f[0]=0
 f[1]=-1.76006e-08
--
 +++++++++++++++ calc_circuit returning- fnor=1.5489e-16
      FNOR1=0.154890E-15 FNOR=0.176434E-14 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.352869E-14 MINLBD=0.768877E-04
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.973987
  RESIDUAL=0.176006E-07, STEP=0.130060E-01,  RESIDUAL DECR.  =0.271313E-12
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=9
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.973987
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 2.02997e-06 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.973987
 F =J*Xc: 
     F[0]=0
     F[1]=1.97716e-06
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-1.76006e-08
*** FN= 

     x[0]=0
     x[1]=-1.76006e-08
 *** fnor=1.5489e-16
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-1.76006e-08 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-3.57285e-14 s ij=2.02997e-06 fj=-1.76006e-08 sfj=1
*** GR= 

     x[0]=0
     x[1]=-3.57285e-14
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.982658
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.982658
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.973987
 Xn = 

     x[0]=0
     x[1]=0.982658
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.00867038
      EPSDU= 0.100000E-05 RELLEN=0.867038E-02 MINLBD=0.115335E-03
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.982658
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=1.99476e-06
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -1.12771e-06
element::tr_load_source A1.Yj d=1.10294e-06
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 9.02258e-07 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.982658
 F =J*Xc: 
     F[0]=0
     F[1]=8.8661e-07
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-5.21472e-09
    ---------- results f[] 
 f[0]=0
 f[1]=-5.21472e-09
--
 +++++++++++++++ calc_circuit returning- fnor=1.35967e-17
      FNOR1=0.135967E-16 FNOR=0.154890E-15 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.309780E-15 MINLBD=0.115335E-03
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.982658
  RESIDUAL=0.521472E-08, STEP=0.867038E-02,  RESIDUAL DECR.  =0.357285E-13
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=10
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.982658
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 9.02258e-07 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.982658
 F =J*Xc: 
     F[0]=0
     F[1]=8.8661e-07
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-5.21472e-09
*** FN= 

     x[0]=0
     x[1]=-5.21472e-09
 *** fnor=1.35967e-17
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-5.21472e-09 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-4.70502e-15 s ij=9.02258e-07 fj=-5.21472e-09 sfj=1
*** GR= 

     x[0]=0
     x[1]=-4.70502e-15
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.988437
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.988437
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.982658
 Xn = 

     x[0]=0
     x[1]=0.988437
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.00577964
      EPSDU= 0.100000E-05 RELLEN=0.577964E-02 MINLBD=0.173021E-03
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.988437
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=8.91825e-07
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -5.01178e-07
element::tr_load_source A1.Yj d=4.93838e-07
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 4.0108e-07 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.988437
 F =J*Xc: 
     F[0]=0
     F[1]=3.96442e-07
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-1.54485e-09
    ---------- results f[] 
 f[0]=0
 f[1]=-1.54485e-09
--
 +++++++++++++++ calc_circuit returning- fnor=1.19327e-18
      FNOR1=0.119327E-17 FNOR=0.135967E-16 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.271934E-16 MINLBD=0.173021E-03
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.988437
  RESIDUAL=0.154485E-08, STEP=0.577964E-02,  RESIDUAL DECR.  =0.470502E-14
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=11
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.988437
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 4.0108e-07 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.988437
 F =J*Xc: 
     F[0]=0
     F[1]=3.96442e-07
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-1.54485e-09
*** FN= 

     x[0]=0
     x[1]=-1.54485e-09
 *** fnor=1.19327e-18
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-1.54485e-09 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-6.19607e-16 s ij=4.0108e-07 fj=-1.54485e-09 sfj=1
*** GR= 

     x[0]=0
     x[1]=-6.19607e-16
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.992289
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.992289
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.988437
 Xn = 

     x[0]=0
     x[1]=0.992289
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.00385172
      EPSDU= 0.100000E-05 RELLEN=0.385172E-02 MINLBD=0.259625E-03
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.992289
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=3.97987e-07
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -2.22707e-07
element::tr_load_source A1.Yj d=2.20532e-07
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 1.78373e-07 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.992289
 F =J*Xc: 
     F[0]=0
     F[1]=1.76997e-07
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-4.57474e-10
    ---------- results f[] 
 f[0]=0
 f[1]=-4.57474e-10
--
 +++++++++++++++ calc_circuit returning- fnor=1.04641e-19
      FNOR1=0.104641E-18 FNOR=0.119327E-17 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.238655E-17 MINLBD=0.259625E-03
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.992289
  RESIDUAL=0.457474E-09, STEP=0.385172E-02,  RESIDUAL DECR.  =0.619607E-15
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=12
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.992289
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 1.78373e-07 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.992289
 F =J*Xc: 
     F[0]=0
     F[1]=1.76997e-07
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-4.57474e-10
*** FN= 

     x[0]=0
     x[1]=-4.57474e-10
 *** fnor=1.04641e-19
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-4.57474e-10 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-8.16009e-17 s ij=1.78373e-07 fj=-4.57474e-10 sfj=1
*** GR= 

     x[0]=0
     x[1]=-8.16009e-17
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.994854
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.994854
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.992289
 Xn = 

     x[0]=0
     x[1]=0.994854
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.00256471
      EPSDU= 0.100000E-05 RELLEN=0.256471E-02 MINLBD=0.389908E-03
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.994854
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=1.77455e-07
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -9.89233e-08
element::tr_load_source A1.Yj d=9.82789e-08
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 7.94495e-08 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.994854
 F =J*Xc: 
     F[0]=0
     F[1]=7.90406e-08
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-1.3529e-10
    ---------- results f[] 
 f[0]=0
 f[1]=-1.3529e-10
--
 +++++++++++++++ calc_circuit returning- fnor=9.15164e-21
      FNOR1=0.915164E-20 FNOR=0.104641E-18 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.209282E-18 MINLBD=0.389908E-03
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.994854
  RESIDUAL=0.135290E-09, STEP=0.256471E-02,  RESIDUAL DECR.  =0.816009E-16
 ---- termocode =0
  converged_iter = 0 shall_stop =0
==== loop beginning,  iter=13
    =* OPT::bypass != true
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
    =# device queue=A1.Yj ->tr_load()
element::tr_load_source A1.Yj d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
 load_matrix_print
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
 load_matrix_print
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.994854
 load_matrix_print
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 7.94495e-08 | 
 F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.994854
 F =J*Xc: 
     F[0]=0
     F[1]=7.90406e-08
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-1.3529e-10
*** FN= 

     x[0]=0
     x[1]=-1.3529e-10
 *** fnor=9.15164e-21
 N=1
j=0 i=0 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=0 GR[i]=0 s ij=0 fj=-1.3529e-10 sfj=1
j=0 i=1 GR[i]=0 s ij=0 fj=0 sfj=1
j=1 i=1 GR[i]=-1.07487e-17 s ij=7.94495e-08 fj=-1.3529e-10 sfj=1
*** GR= 

     x[0]=0
     x[1]=-1.07487e-17
 === solve: solve_equations 
    == in solve_equations: 
point3
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
point3
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.996557
 solution after linear solver
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.996557
 *** calculating Y: 
  X  = 

     x[0]=0
     x[1]=0.994854
 Xn = 

     x[0]=0
     x[1]=0.996557
*** X-Xn= Y= 

     x[0]=0
     x[1]=-0.00170284
      EPSDU= 0.100000E-05 RELLEN=0.170284E-02 MINLBD=0.587255E-03
 +++++++++++++++ calc_circuit entering +
 x[0]=0
 x[1]=0.996557
--
    ---------- copy X to _sim->_v0 
    ---------- evaluate_models 
    =* OPT::bypass != true
    ---------- load_matrix 
  ===# load_matrix entered 
point1
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
    =# work with loadq 
    =# device queue=I1 ->tr_load()
element::tr_load_source I1 d=0
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=7.91759e-08
    =# device queue=A1.Yj ->tr_load()
BSMATRIX<T>::load_symmetric i, j, + val: 1 0 -4.38794e-08
element::tr_load_source A1.Yj d=4.36884e-08
 NOTE - load is conditional, only change was loaded 
point2
    == _sim->_i (rhs): 
     _sim->_i[1]=3.54874e-08
point "load_matrix exit"
    == _sim->_i (rhs): 
     _sim->_i[1]=3.54874e-08
 matrix loaded
    == _sim->_i (rhs): 
     _sim->_i[1]=3.54874e-08
 matrix loaded
    == _sim->_aa: 
 | 0 | 0 | 
 | 0 | 3.55701e-08 | 
    ---------- calc_error_func \n F cleaned: 
     F[0]=0
     F[1]=0
 V0 : 
     _v0[0]=0
     _v0[1]=0.996557
 F =J*Xc: 
     F[0]=0
     F[1]=3.54476e-08
 F =J*Xc - Fg: 
     F[0]=0
     F[1]=-3.98286e-11
    ---------- results f[] 
 f[0]=0
 f[1]=-3.98286e-11
--
 +++++++++++++++ calc_circuit returning- fnor=7.93157e-22
      FNOR1=0.793157E-21 FNOR=0.915164E-20 ALPHA=0.100000E-03 LAMBDA=0.100000E+01 SLOPE=-.183033E-19 MINLBD=0.587255E-03
 after lin search - lambda=1 retcode = 0
 solution after damping
    == _sim->_v0 (sol): 
     _sim->_v0[1]=0.996557
SUCCESS.
  AT     1-TH ITERATION CONVERGED TO SOLUTION    
  WITH RESIDUAL <= 0.398286E-10 ( < 0.100000E-09 )
  1/2 OF SQUARED L-2 NORM OF RESIDUAL =0.915164E-20
 ---- termocode =1
  converged_iter = 1 shall_stop =1
 #### solve_with_homotopy : continuing 
 27.        0.99656   -0.001     
